{"version":3,"sources":["logo.svg","pages/chat/components/ChatWindow.js","pages/chat/components/ChatInput.js","pages/chat/components/ActiveUser.js","pages/chat/metadata/chatUsers.js","pages/chat/MyChat.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","userStyle","display","justifyContent","marginBottom","otherUserStyle","ChatWindow","props","id","user","messages","style","cursor","position","padding","height","overflowY","flexDirection","map","item","index","poster","message","time","name","key","maxWidth","Avatar","alt","src","img","marginRight","backgroundColor","borderRadius","color","Typography","variant","fontWeight","marginTop","textTransform","ChatInput","handleSubmit","handleChange","value","alignItems","onSubmit","e","width","Paper","elevation","marginLeft","flexGrow","boxShadow","InputBase","placeholder","inputProps","onChange","target","IconButton","type","aria-label","Divider","orientation","ActiveUser","users","MyChat","React","useState","selectedUser","setSelectedUser","inputValue","setInputValue","setReply","date","Date","reply","length","toLocaleString","undefined","hour","minute","unshift","borderRight","flexBasis","flexShrink","Toolbar","List","dense","paddingTop","ListItem","button","divider","onClick","handleClick","ListItemAvatar","ListItemText","primary","secondary","textOverflow","whiteSpace","overflow","minWidth","Object","keys","right","preventDefault","setTimeout","val","maxHeight","textAlign","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.06b28e9c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport { Typography, Box, Avatar } from \"@material-ui/core\";\n\nconst userStyle = {\n  display: \"flex\",\n  justifyContent: \"flex-end\",\n  marginBottom: 16\n};\n\nconst otherUserStyle = {\n  marginBottom: 16\n};\n\nconst ChatWindow = props => {\n  const { id, user, ...other } = props;\n  const { messages } = user;\n\n  return (\n    <div style={{ cursor: \"pointer\" }}>\n      <div style={{ position: \"relative\" }}>\n        <div\n          style={{\n            padding: 16,\n            height: \"70vh\",\n            overflowY: \"auto\",\n            display: \"flex\",\n            flexDirection: \"column-reverse\"\n          }}\n          id=\"chat-window\"\n        >\n          {messages.map((item, index) => {\n            const { poster, message, time } = item;\n\n            return (\n              <div\n                style={user.name === poster ? otherUserStyle : userStyle}\n                key={index}\n              >\n                <div style={{ display: \"flex\", maxWidth: 500 }}>\n                  {user.name === poster ? (\n                    <Avatar\n                      alt={user.name}\n                      src={user.img}\n                      style={{ marginRight: 16 }}\n                    >\n                      {!user.img && user.name[0]}\n                    </Avatar>\n                  ) : (\n                    <Avatar\n                      style={{ backgroundColor: \"orange\", marginRight: 16 }}\n                    >\n                      H\n                    </Avatar>\n                  )}\n                  <div>\n                    <div\n                      style={{\n                        padding: \"8px 16px\",\n                        borderRadius: 4,\n                        backgroundColor:\n                          user.name === poster ? \"#f5f5f5\" : \"#3f51b5\",\n                        color: user.name === poster ? \"black\" : \"white\"\n                      }}\n                    >\n                      <Typography variant=\"body2\" style={{ fontWeight: 500 }}>\n                        {poster}\n                      </Typography>\n                      <Typography variant=\"body2\" style={{ marginTop: 8 }}>\n                        {message}\n                      </Typography>\n                    </div>\n                    <div\n                      style={{\n                        display: \"flex\",\n                        marginTop: \"8px\",\n                        justifyContent: \"flex-end\"\n                      }}\n                    >\n                      <Typography\n                        variant=\"body2\"\n                        style={{ textTransform: \"lowercase\" }}\n                      >\n                        {time}\n                      </Typography>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatWindow;\n","import React from \"react\";\nimport {\n  Paper,\n  InputBase,\n  IconButton,\n  Avatar,\n  Divider\n} from \"@material-ui/core\";\nimport SendOutlinedIcon from \"@material-ui/icons/SendOutlined\";\n\nconst ChatInput = ({ handleSubmit, handleChange, value }) => {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        alignItems: \"center\",\n        padding: \"8px 16px\"\n      }}\n    >\n      <Avatar style={{ backgroundColor: \"orange\" }}>H</Avatar>\n      <form onSubmit={e => handleSubmit(e)} style={{ display: \"flex\", width: \"100%\" }}>\n        <Paper\n          elevation={1}\n          style={{\n            marginLeft: 16,\n            flexGrow: 1,\n            padding: \"4px 16px\",\n            boxShadow:\n              \"0 0 0 1px rgba(63,63,68,0.05), 0 1px 3px 0 rgba(63,63,68,0.15)\"\n          }}\n        >\n          <InputBase\n            style={{ width: \"100%\" }}\n            placeholder=\"Leave a message\"\n            inputProps={{ \"aria-label\": \"leave a message\" }}\n            onChange={e => handleChange(e.target.value)}\n            value={value}\n          />\n        </Paper>\n        <IconButton type=\"submit\" aria-label=\"send\">\n          <SendOutlinedIcon />\n        </IconButton>\n      </form>\n      <Divider orientation=\"vertical\" />\n    </div>\n  );\n};\n\nexport default ChatInput;\n","import React from \"react\";\nimport { Typography } from \"@material-ui/core\";\n\nconst ActiveUser = ({ user }) => {\n  return (\n    <div>\n      <Typography variant=\"body1\">{user.name}</Typography>\n      <div style={{ display: \"flex\", alignItems: \"center\" }}>\n        <span\n          style={{\n            width: 8,\n            height: 8,\n            backgroundColor: \"green\",\n            borderRadius: \"50%\",\n            marginRight: 8,\n            display: \"inline-block\"\n          }}\n        ></span>\n        <Typography variant=\"body2\" color=\"textSecondary\">\n          Active now\n        </Typography>\n      </div>\n    </div>\n  );\n};\n\nexport default ActiveUser;\n","export const users = [\n    {\n        name: \"Remy Sharp\",\n        img: \"https://material-ui.com/static/images/avatar/1.jpg\",\n        messages: [\n            {\n                poster: \"Current User\",\n                time: \"9:10 pm\",\n                message: \"Sure. It would be for $150/day. Is that ok with you?\"\n            },\n            {\n                poster: \"Remy Sharp\",\n                time: \"9:05 pm\",\n                message: \"I'm interested in renting out your Tesla this weekend.\"\n            }\n        ]\n    },\n    {\n        name: \"Travis Howard\",\n        img: \"https://material-ui.com/static/images/avatar/2.jpg\",\n        messages: [\n            {\n                poster: \"Travis Howard\",\n                time: \"1:11 pm\",\n                message: \"Sure can! Please send me the details.\"\n            },\n            {\n                poster: \"Current User\",\n                time: \"1:10 pm\",\n                message: \"Can you do it this Thursday?\"\n            },\n            {\n                poster: \"Travis Howard\",\n                time: \"1:02 pm\",\n                message: \"I can do it for $35/hr. When did you need it fixed?\"\n            },\n            {\n                poster: \"Current User\",\n                time: \"12:37 pm\",\n                message: \"How much for you to fix my roof?\"\n            },\n        ]\n    },\n    {\n        name: \"James Clark\",\n        img: \"\",\n        messages: [\n            {\n                poster: \"Current User\",\n                time: \"6:17 am\",\n                message: \"I will get back to you.\"\n            },\n            {\n                poster: \"James Clark\",\n                time: \"3:54 am\",\n                message: \"I am willing to pay $100/template. Is this ok with you?\"\n            },\n            {\n                poster: \"James Clark\",\n                time: \"3:48 am\",\n                message: \"I need some email templates created? Are you available?\"\n            },\n        ]\n    },\n    {\n        name: \"Cindy Baker\",\n        img: \"https://material-ui.com/static/images/avatar/3.jpg\",\n        messages: [\n            {\n                poster: \"Cindy Baker\",\n                time: \"7:35 am\",\n                message: \"Cool, thanks! Will get back to you.\"\n            },\n            {\n                poster: \"Current User\",\n                time: \"7:30 am\",\n                message: \"Hi Cindy. Please see attached and let me know if you have questions\"\n            },\n            {\n                poster: \"Cindy Baker\",\n                time: \"6:41 am\",\n                message: \"Can you send me a proposal for ecommerce page mockup?\"\n            },\n        ]\n    },\n    {\n        name: \"Brenda Lim\",\n        img: \"\",\n        messages: [\n            {\n                poster: \"Brenda Lim\",\n                time: \"2:12 pm\",\n                message: \"Sure. It is for a wedding 2 weeks from now - Saturday at San Francisco.\"\n            },\n            {\n                poster: \"Current User\",\n                time: \"12:58 am\",\n                message: \"Hi. Yes I do. Can you provide more details?\"\n            },\n            {\n                poster: \"Brenda Lim\",\n                time: \"12:48 pm\",\n                message: \"Hello? Do you provide wedding photography service?\"\n            },\n        ]\n    }\n]","import React from \"react\";\nimport {\n  Toolbar,\n  InputBase,\n  IconButton,\n  Typography,\n  List,\n  ListItemAvatar,\n  ListItem,\n  Avatar,\n  ListItemText,\n  Divider\n} from \"@material-ui/core\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport ChatWindow from \"./components/ChatWindow\";\nimport ChatInput from \"./components/ChatInput\";\nimport ActiveUser from \"./components/ActiveUser\";\nimport { users } from \"./metadata/chatUsers\";\n\nconst MyChat = () => {\n  const [selectedUser, setSelectedUser] = React.useState({});\n  const [inputValue, setInputValue] = React.useState(\"\");\n\n  const handleClick = user => {\n    setSelectedUser(user);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    let date = new Date();\n\n    if (inputValue) {\n      selectedUser.messages.unshift({\n        poster: \"Current User\",\n        message: inputValue,\n        time: date.toLocaleString(undefined, {\n          hour: \"2-digit\",\n          minute: \"2-digit\"\n        })\n      });\n\n      /**  Temporary - mock a user reply*/\n      setTimeout(setReply, 2000);\n      \n      setSelectedUser(selectedUser);\n      setInputValue(\"\");\n    }\n  };\n\n  /** Temporary - mock a user reply */\n  const setReply = () => {\n    let date = new Date();\n    const reply = {\n      poster: selectedUser.name,\n      message: `Your message contains ${inputValue.length} characters.`,\n      time: date.toLocaleString(undefined, {\n        hour: \"2-digit\",\n        minute: \"2-digit\"\n      })\n    };\n\n    \n    setSelectedUser({\n      ...selectedUser,\n      messages: [reply, ...selectedUser.messages]\n    });\n    selectedUser.messages.unshift(reply)\n  };\n\n  const handleChange = val => {\n    setInputValue(val);\n  };\n\n  return (\n    <div style={{ flexGrow: 1 }}>\n      <div style={{ display: \"flex\" }}>\n        <div\n          style={{\n            borderRight: \"1px solid silver\",\n            width: \"300px\",\n            flexBasis: \"300px\",\n            flexShrink: 0,\n            height: \"100vh\"\n          }}\n        >\n          <Toolbar>\n            <InputBase placeholder=\"Search Contacts\" style={{ flexGrow: 1 }} />\n            <IconButton type=\"submit\">\n              <SearchIcon />\n            </IconButton>\n          </Toolbar>\n          <Divider />\n          <List dense={true} style={{ paddingTop: 0 }}>\n            {users.map((user, index) => {\n              return (\n                <ListItem\n                  button\n                  alignItems=\"flex-start\"\n                  divider={true}\n                  value={0}\n                  onClick={() => handleClick(user)}\n                  key={user.name}\n                  style={{\n                    boxShadow:\n                      user.name === selectedUser.name\n                        ? \"inset 4px 0px 0px #3f51b5\"\n                        : \"\"\n                  }}\n                >\n                  <ListItemAvatar>\n                    <Avatar alt={user.name} src={user.img} >{!user.img && user.name[0]}</Avatar>\n                  </ListItemAvatar>\n                  <ListItemText\n                    primary={user.name}\n                    secondary={\n                      <span\n                        style={{\n                          display: \"inline-block\",\n                          textOverflow: \"ellipsis\",\n                          width: 130,\n                          whiteSpace: \"nowrap\",\n                          overflow: \"hidden\"\n                        }}\n                      >\n                        {user.messages[0].message}\n                      </span>\n                    }\n                  />\n                  <Typography variant=\"body2\">\n                    {user.messages[0].time}\n                  </Typography>\n                </ListItem>\n              );\n            })}\n          </List>\n        </div>\n        <div\n          style={{\n            flexGrow: 1,\n            display: \"flex\",\n            flexDirection: \"column\",\n            minWidth: 500,\n            justifyContent: Object.keys(selectedUser).length > 0 ? \"\" : \"center\"\n          }}\n        >\n          {Object.keys(selectedUser).length > 0 ? (\n            <>\n              <Toolbar>\n                <ActiveUser user={selectedUser} />\n                <IconButton style={{ position: \"absolute\", right: 0 }}>\n                  <MoreVertIcon />\n                </IconButton>\n              </Toolbar>\n              <Divider />\n              <ChatWindow id={selectedUser.name} user={selectedUser} />\n              <Divider />\n              <ChatInput\n                handleSubmit={handleSubmit}\n                handleChange={handleChange}\n                value={inputValue}\n              />\n            </>\n          ) : (\n            <div\n              style={{\n                flexGrow: 1,\n                maxHeight: \"70%\",\n                cursor: \"pointer\",\n                textAlign: \"center\"\n              }}\n            >\n              <img\n                width=\"400\"\n                alt=\"chat\"\n                src=\"https://cdn.pixabay.com/photo/2016/11/30/18/14/chat-1873543_960_720.png\"\n              />\n              <Typography variant=\"body1\">\n                Select a conversation to display.\n              </Typography>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MyChat;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MyChat from './pages/chat/MyChat';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MyChat />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}